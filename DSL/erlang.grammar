Rootsymbol form.

form -> attribute dot.
form -> function dot.
form -> rule dot.

attribute -> '-' atom attr_val.
attribute -> '-' atom typed_attr_val.
attribute -> '-' atom '(' typed_attr_val ')'.
attribute -> '-' 'spec' type_spec.

atom1 -> 'spec'.
atom1 -> atom.

type_spec -> spec_fun type_sigs.
type_spec -> '(' spec_fun type_sigs ')'.

spec_fun ->                            atom1.
spec_fun ->                  atom1 ':' atom1.
spec_fun ->           atom1 '/' integer '::'.
spec_fun -> atom1 ':' atom1 '/' integer '::'.

typed_attr_val -> expr ',' typed_record_fields.
typed_attr_val -> expr '::' top_type.

typed_record_fields -> '{' typed_exprs '}'.

typed_exprs -> typed_expr.
typed_exprs -> typed_expr ',' typed_exprs.
typed_exprs -> expr ',' typed_exprs.
typed_exprs -> typed_expr ',' exprs.

typed_expr -> expr '::' top_type.

type_sigs -> type_sig.
type_sigs -> type_sig ';' type_sigs.

type_sig -> fun_type.
type_sig -> fun_type 'when' type_guards.

type_guards -> type_guard.
type_guards -> type_guard ',' type_guards.

type_guard -> atom1 '(' top_types ')'.

top_types -> top_type.
top_types -> top_type ',' top_types.

top_type -> var '::' top_type_100.
top_type -> top_type_100.

top_type_100 -> type.
top_type_100 -> type '|' top_type_100.

type -> '(' top_type ')'.
type -> var.
type -> atom1.
type -> atom1 '(' ')'.
type -> atom1 '(' top_types ')'.
type -> atom1 ':' atom1 '(' ')'.
type -> atom1 ':' atom1 '(' top_types ')'.
type -> '[' ']'.
type -> '[' top_type ']'.
type -> '[' top_type ',' '.' '.' '.' ']'.
type -> '{' '}'.
type -> '{' top_types '}'.
type -> '#' atom1 '{' '}'.
type -> '#' atom1 '{' field_types '}'.
type -> binary_type.
type -> int_type.
type -> int_type '.' '.' int_type.
type -> 'fun' '(' ')'.
type -> 'fun' '(' fun_type_100 ')'.

int_type -> integer.
int_type -> '-' integer.

fun_type_100 -> '(' '.' '.' '.' ')' '->' top_type.
fun_type_100 -> fun_type.

fun_type -> '(' ')' '->' top_type.
fun_type -> '(' top_types ')' '->' top_type.

field_types -> field_type.
field_types -> field_type ',' field_types.

field_type -> atom1 '::' top_type.

binary_type -> '<<' '>>'.
binary_type -> '<<' bin_base_type '>>'.
binary_type -> '<<' bin_unit_type '>>'.
binary_type -> '<<' bin_base_type ',' bin_unit_type '>>'.

bin_base_type -> var ':' integer.

bin_unit_type -> var ':' var '*' integer.

attr_val -> expr.
attr_val -> expr ',' exprs.
attr_val -> '(' expr ',' exprs ')'.

function -> function_clauses.

function_clauses -> function_clause.
function_clauses -> function_clause ';' function_clauses.

function_clause -> atom1 clause_args clause_guard clause_body.

clause_args -> argument_list.

clause_guard -> 'when' guard.
clause_guard -> '$empty'.

clause_body -> '->' exprs: '$2'.

expr -> 'catch' expr.
expr -> expr_100.

expr_100 -> expr_150 '=' expr_100.
expr_100 -> expr_150 '!' expr_100.
expr_100 -> expr_150.

expr_150 -> expr_160 'orelse' expr_150.
expr_150 -> expr_160.

expr_160 -> expr_200 'andalso' expr_160.
expr_160 -> expr_200.

expr_200 -> expr_300 comp_op expr_300.
expr_200 -> expr_300.

expr_300 -> expr_400 list_op expr_300.
expr_300 -> expr_400.

expr_400 -> expr_400 add_op expr_500.
expr_400 -> expr_500.

expr_500 -> expr_500 mult_op expr_600.
expr_500 -> expr_600.

expr_600 -> prefix_op expr_700.
expr_600 -> expr_700.

expr_700 -> function_call.
expr_700 -> record_expr.
expr_700 -> expr_800.

expr_800 -> expr_900 ':' expr_max.
expr_800 -> expr_900.

expr_900 -> '.' atom1.
expr_900 -> expr_900 '.' atom1.
expr_900 -> expr_max.

expr_max -> var.
expr_max -> atomic.
expr_max -> list.
expr_max -> binary.
expr_max -> list_comprehension.
expr_max -> binary_comprehension.
expr_max -> tuple.
%%expr_max -> struct.
expr_max -> '(' expr ')'.
expr_max -> 'begin' exprs 'end'.
expr_max -> if_expr.
expr_max -> case_expr.
expr_max -> receive_expr.
expr_max -> fun_expr.
%%expr_max -> cond_expr.
expr_max -> try_expr.
expr_max -> query_expr.

list -> '[' ']'.
list -> '[' expr tail.

tail -> ']'.
tail -> '|' expr ']'.
tail -> ',' expr tail.

binary -> '<<' '>>'.
binary -> '<<' bin_elements '>>'.

bin_elements -> bin_element.
bin_elements -> bin_element ',' bin_elements.

bin_element -> bit_expr opt_bit_size_expr opt_bit_type_list.

bit_expr -> prefix_op expr_max.
bit_expr -> expr_max.

opt_bit_size_expr -> ':' bit_size_expr.
opt_bit_size_expr -> '$empty'.

opt_bit_type_list -> '/' bit_type_list.
opt_bit_type_list -> '$empty'.

bit_type_list -> bit_type '-' bit_type_list.
bit_type_list -> bit_type.

bit_type -> atom1.
bit_type -> atom1 ':' integer.

bit_size_expr -> expr_max.

list_comprehension -> '[' expr '||' lc_exprs ']'.
binary_comprehension -> '<<' binary '||' lc_exprs '>>'.
lc_exprs -> lc_expr.
lc_exprs -> lc_expr ',' lc_exprs.

lc_expr -> expr.
lc_expr -> expr '<-' expr.
lc_expr -> binary '<=' expr.

tuple -> '{' '}'.
tuple -> '{' exprs '}'.

record_expr -> '#' atom1 '.' atom1.
record_expr -> '#' atom1 record_tuple.
record_expr -> expr_max '#' atom1 '.' atom1.
record_expr -> expr_max '#' atom1 record_tuple.

record_tuple -> '{' '}'.
record_tuple -> '{' record_fields '}'.

record_fields -> record_field.
record_fields -> record_field ',' record_fields.

record_field -> var '=' expr.
record_field -> atom1 '=' expr.

function_call -> expr_800 argument_list.

if_expr -> 'if' if_clauses 'end'.

if_clauses -> if_clause.
if_clauses -> if_clause ';' if_clauses.

if_clause -> guard clause_body.

case_expr -> 'case' expr 'of' cr_clauses 'end'.

cr_clauses -> cr_clause.
cr_clauses -> cr_clause ';' cr_clauses.

cr_clause -> expr clause_guard clause_body.

receive_expr -> 'receive' cr_clauses 'end'.
receive_expr -> 'receive' 'after' expr clause_body 'end'.
receive_expr -> 'receive' cr_clauses 'after' expr clause_body 'end'.

fun_expr -> 'fun' atom1 '/' integer.
fun_expr -> 'fun' atom1 ':' atom1 '/' integer.
fun_expr -> 'fun' fun_clauses 'end'.

fun_clauses -> fun_clause.
fun_clauses -> fun_clause ';' fun_clauses.

fun_clause -> argument_list clause_guard clause_body.

try_expr -> 'try' exprs 'of' cr_clauses try_catch.
try_expr -> 'try' exprs try_catch.

try_catch -> 'catch' try_clauses 'end'.
try_catch -> 'catch' try_clauses 'after' exprs 'end'.
try_catch -> 'after' exprs 'end'.

try_clauses -> try_clause.
try_clauses -> try_clause ';' try_clauses.

try_clause -> expr clause_guard clause_body.
try_clause -> atom1 ':' expr clause_guard clause_body.
try_clause -> var ':' expr clause_guard clause_body.

query_expr -> 'query' list_comprehension 'end'.

argument_list -> '(' ')'.
argument_list -> '(' exprs ')'.

exprs -> expr.
exprs -> expr ',' exprs.

guard -> exprs.
guard -> exprs ';' guard.

atomic -> char.
atomic -> integer.
atomic -> float.
atomic -> atom1.
atomic -> strings.

strings -> string.
strings -> string strings.

prefix_op -> '+'.
prefix_op -> '-'.
prefix_op -> 'bnot'.
prefix_op -> 'not'.

mult_op -> '/'.
mult_op -> '*'.
mult_op -> 'div'.
mult_op -> 'rem'.
mult_op -> 'band'.
mult_op -> 'and'.

add_op -> '+'.
add_op -> '-'.
add_op -> 'bor'.
add_op -> 'bxor'.
add_op -> 'bsl'.
add_op -> 'bsr'.
add_op -> 'or'.
add_op -> 'xor'.

list_op -> '++'.
list_op -> '--'.

comp_op -> '=='.
comp_op -> '/='.
comp_op -> '=<'.
comp_op -> '<'.
comp_op -> '>='.
comp_op -> '>'.
comp_op -> '=:='.
comp_op -> '=/='.

rule -> rule_clauses.

rule_clauses -> rule_clause.
rule_clauses -> rule_clause ';' rule_clauses.

rule_clause -> atom1 clause_args clause_guard rule_body.

rule_body -> ':-' lc_exprs.
